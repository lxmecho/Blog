---
import BaseLayout from './BaseLayout.astro';
import { formatDate } from '../utils/date';
import type { CollectionEntry } from 'astro:content';
import '../assets/resource-styles.css';
import '../assets/blog-backgrounds.css';

interface Props {
  post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
const { title, description, pubDate, updatedDate, heroImage, backgroundImage, tags, category } = post.data;

// 计算阅读时间
const readingTime = Math.max(1, Math.ceil(post.body.split(' ').length / 200));
// 计算字数
const wordCount = post.body.split(/\s+/).length;

// 背景图优先级: 专门的背景图 > 文章顶部图片 > 默认背景图
const defaultBgImage = '/assets/images/6.jpg';
const bgImage = backgroundImage || heroImage || defaultBgImage;
---

<BaseLayout title={title} description={description} image={heroImage}>
  <!-- 添加全屏背景图 -->
  <div class="blog-background" style={`background-image: url(${bgImage})`}></div>

  <div class="container mx-auto px-4 py-8 relative z-10">
    <div class="max-w-4xl mx-auto bg-card-light dark:bg-card-dark rounded-lg shadow-card overflow-hidden">
      {heroImage && (
        <div class="w-full h-64 md:h-80 overflow-hidden">
          <img
            src={heroImage}
            alt={title}
            class="w-full h-full object-cover"
            loading="lazy"
          />
        </div>
      )}
      
      <article class="p-6 md:p-8">
        <header class="mb-8">
          <h1 class="text-3xl md:text-4xl font-bold mb-4">{title}</h1>
          
          <div class="flex flex-wrap items-center text-sm text-gray-600 dark:text-gray-400 gap-4 mb-4">
            <!-- 发布日期 -->
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <time datetime={pubDate.toISOString()}>
                {formatDate(pubDate)}
              </time>
            </div>
            
            <!-- 分类 -->
            {category && (
              <div class="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                </svg>
                <span>{category}</span>
              </div>
            )}
            
            <!-- 阅读时间和字数 -->
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
              </svg>
              <span>{wordCount} 字 / {readingTime} 分钟</span>
            </div>
          </div>
          
          <!-- 标签 -->
          {tags && tags.length > 0 && (
            <div class="flex flex-wrap gap-2 mt-4">
              {tags.map((tag) => (
                <a 
                  href={`/tag/${tag}`}
                  class="inline-flex items-center px-3 py-1 rounded-full text-xs bg-gray-100 dark:bg-gray-800 hover:bg-primary-100 dark:hover:bg-primary-900 transition"
                >
                  <span class="mr-1">#</span>{tag}
                </a>
              ))}
            </div>
          )}
        </header>
        
        <div class="prose dark:prose-dark max-w-none resource-blog">
          <slot />
        </div>
        
        {updatedDate && updatedDate > pubDate && (
          <p class="mt-8 text-sm text-gray-500 dark:text-gray-400 italic">
            上次更新于 {formatDate(updatedDate)}
          </p>
        )}
      </article>
    </div>
  </div>

  <script>
    // 在博客文章页面中自动恢复音乐播放状态
    document.addEventListener('DOMContentLoaded', () => {
      // 尝试从sessionStorage获取音频状态
      try {
        const audioState = sessionStorage.getItem('global-music-audio-state');
        if (audioState) {
          const state = JSON.parse(audioState);
          
          // 如果之前是播放状态，确保在新页面也继续播放
          if (state.isPlaying) {
            // 获取全局音频实例（如果存在）
            const globalAudio = window.globalMusicAudio;
            if (globalAudio && globalAudio.paused) {
              // 尝试恢复播放
              const playPromise = globalAudio.play();
              if (playPromise !== undefined) {
                playPromise.catch(error => {
                  console.log("博客页面: 自动恢复播放失败，可能需要用户交互:", error);
                });
              }
            }
          }
        }
      } catch (e) {
        console.error('博客页面: 恢复音频状态失败:', e);
      }
    });
  </script>
</BaseLayout> 