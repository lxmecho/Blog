---
// 音乐播放器组件 - 在博客右上角添加音乐播放功能
---

<div id="music-player" class="relative">
  <button 
    id="music-toggle" 
    class="p-1.5 rounded-full text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-primary-500 dark:hover:text-primary-500 transition-colors"
    aria-label="播放/暂停音乐"
    title="播放/暂停音乐"
  >
    <!-- 播放图标 -->
    <svg id="play-icon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
    
    <!-- 暂停图标 (默认隐藏) -->
    <svg id="pause-icon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
    
    <!-- 音乐播放动画 - 显示播放状态的小圆点 -->
    <div id="music-animation" class="absolute -top-1 -right-1 hidden">
      <span class="flex h-2 w-2">
        <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-primary-400 opacity-75"></span>
        <span class="relative inline-flex rounded-full h-2 w-2 bg-primary-500"></span>
      </span>
    </div>
  </button>
  
  <!-- 首次访问提示 -->
  <div id="first-visit-tooltip" class="hidden absolute right-0 top-full mt-2 bg-white dark:bg-gray-800 rounded-md shadow-lg p-3 text-xs w-64 z-20 transform -translate-x-1/4 transition-all duration-300">
    <p class="mb-2 font-medium">点击按钮即可随机播放背景音乐</p>
    <p class="text-gray-600 dark:text-gray-400">共有21首歌曲，将随机播放其中之一</p>
    <button id="tooltip-dismiss" class="mt-2 px-2 py-1 bg-primary-500 text-white rounded text-xs">知道了</button>
  </div>
  
  <!-- 歌曲信息提示 - 鼠标悬停时显示 -->
  <div id="song-info" class="absolute right-0 top-full mt-1 bg-white dark:bg-gray-800 rounded-md shadow-lg p-2 text-xs w-48 hidden z-10 transform -translate-x-1/4 opacity-0 transition-all duration-300">
    <div class="flex items-center">
      <div class="flex-shrink-0 w-8 h-8 bg-gray-200 dark:bg-gray-700 rounded overflow-hidden mr-2">
        <div id="song-cover" class="w-full h-full bg-center bg-cover"></div>
      </div>
      <div class="overflow-hidden">
        <div id="song-name" class="font-medium text-gray-900 dark:text-gray-100 truncate"></div>
        <div id="song-artist" class="text-gray-500 dark:text-gray-400 truncate"></div>
      </div>
    </div>
    <div class="mt-1 relative h-1 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
      <div id="song-progress" class="absolute top-0 left-0 h-full bg-primary-500 rounded-full" style="width: 0%"></div>
    </div>
  </div>
  
  <!-- 音频元素 - 仅在全局音频未初始化时使用 -->
  <div id="music-audio-container" style="display:none;"></div>

  <!-- 调试信息 -->
  <div id="music-debug" class="hidden fixed bottom-4 right-4 bg-white dark:bg-gray-800 p-2 rounded shadow-lg text-xs max-w-xs z-50 overflow-auto" style="max-height: 200px;"></div>
</div>

<script>
  // ===== 音乐库配置 =====
  // 歌曲库配置
  const musicLibrary = [
    {
      title: "三国杀",
      artist: "未知艺术家",
      src: "/assets/music/三国杀.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "惊月",
      artist: "未知艺术家",
      src: "/assets/music/惊月.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "从未记住的名字永远不会被遗忘",
      artist: "未知艺术家",
      src: "/assets/music/从未记住的名字永远不会被遗忘.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "风月明日来",
      artist: "未知艺术家",
      src: "/assets/music/风月明日来.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "赠你一绸星河 错落人间烟火",
      artist: "未知艺术家",
      src: "/assets/music/赠你一绸星河 错落人间烟火.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "日月星辉之中，你是第四种难得",
      artist: "未知艺术家",
      src: "/assets/music/日月星辉之中，你是第四种难得.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "窗边，淡蓝色与你",
      artist: "未知艺术家",
      src: "/assets/music/窗边，淡蓝色与你.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "春",
      artist: "未知艺术家",
      src: "/assets/music/春.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "半壶纱",
      artist: "未知艺术家",
      src: "/assets/music/半壶纱.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "吹灭小山河",
      artist: "未知艺术家",
      src: "/assets/music/吹灭小山河.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "千灯祈缘",
      artist: "未知艺术家",
      src: "/assets/music/千灯祈缘.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "曦铃",
      artist: "未知艺术家",
      src: "/assets/music/曦铃.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "故里逢春",
      artist: "未知艺术家",
      src: "/assets/music/故里逢春.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "三国恋",
      artist: "未知艺术家",
      src: "/assets/music/三国恋.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "Where Did U Go (G.E.M.重生版)",
      artist: "G.E.M.邓紫棋",
      src: "/assets/music/Where Did U Go (G.E.M.重生版).mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "相思误",
      artist: "未知艺术家",
      src: "/assets/music/相思误.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "影子小姐",
      artist: "未知艺术家",
      src: "/assets/music/影子小姐.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "天龙八部之宿敌",
      artist: "未知艺术家",
      src: "/assets/music/天龙八部之宿敌.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "何日重到苏澜桥",
      artist: "未知艺术家",
      src: "/assets/music/何日重到苏澜桥.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "细雨",
      artist: "未知艺术家",
      src: "/assets/music/细雨.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    },
    {
      title: "山水之间",
      artist: "未知艺术家",
      src: "/assets/music/山水之间.mp3",
      cover: "/assets/music/covers/placeholder.svg"
    }
  ];

  // 调试功能 - 将在控制台和调试面板显示信息
  function debugLog(message, obj = null) {
    console.log(`[MusicPlayer] ${message}`, obj || '');
    
    // 在页面上显示调试信息(开发模式)
    try {
      const debugPanel = document.getElementById('music-debug');
      if (debugPanel) {
        const now = new Date();
        const time = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}:${now.getSeconds().toString().padStart(2, '0')}`;
        
        let logText = document.createElement('div');
        logText.className = 'mb-1 border-b border-gray-200 dark:border-gray-700 pb-1';
        logText.innerHTML = `<span class="text-gray-500">${time}</span> ${message}`;
        
        if (obj && typeof obj === 'object') {
          try {
            logText.innerHTML += `<br><span class="text-xs text-gray-400">${JSON.stringify(obj)}</span>`;
          } catch (e) {
            logText.innerHTML += `<br><span class="text-xs text-gray-400">[无法序列化对象]</span>`;
          }
        }
        
        debugPanel.appendChild(logText);
        debugPanel.scrollTop = debugPanel.scrollHeight;
      }
    } catch (e) {
      console.error("调试面板错误:", e);
    }
  }

  // 显示调试面板 - 仅供开发测试用
  function showDebugPanel() {
    const debugPanel = document.getElementById('music-debug');
    if (debugPanel) {
      debugPanel.classList.remove('hidden');
    }
  }

  // 隐藏调试面板
  function hideDebugPanel() {
    const debugPanel = document.getElementById('music-debug');
    if (debugPanel) {
      debugPanel.classList.add('hidden');
    }
  }
  
  // 确保只初始化一次全局音频播放器
  function getGlobalAudio() {
    // 通过使用 sessionStorage 在页面之间共享音频状态
    // 该对象不会在页面导航时丢失
    const GLOBAL_AUDIO_KEY = 'global-music-audio-state';
    
    // 从 sessionStorage 获取当前的播放状态
    function getAudioState() {
      try {
        const state = sessionStorage.getItem(GLOBAL_AUDIO_KEY);
        return state ? JSON.parse(state) : null;
      } catch (e) {
        debugLog('无法解析音频状态:', e);
        return null;
      }
    }
    
    // 保存音频状态到 sessionStorage
    function saveAudioState(state) {
      try {
        sessionStorage.setItem(GLOBAL_AUDIO_KEY, JSON.stringify(state));
      } catch (e) {
        debugLog('无法保存音频状态:', e);
      }
    }
    
    // 检查全局实例是否已存在
    let globalAudio = window.globalMusicAudio;
    
    if (!globalAudio) {
      debugLog("创建全局音频实例");
      // 创建全局音频实例
      globalAudio = new Audio();
      globalAudio.id = 'global-music-audio';
      globalAudio.preload = 'auto';  // 改为自动预加载
      globalAudio.volume = 1.0;      // 设置默认音量为最大
      window.globalMusicAudio = globalAudio;
      
      // 从 sessionStorage 恢复状态
      const storedState = getAudioState();
      if (storedState) {
        debugLog("从存储恢复音频状态", storedState);
        globalAudio.src = storedState.src;
        if (storedState.isPlaying) {
          // 尝试恢复播放
          const playPromise = globalAudio.play();
          if (playPromise !== undefined) {
            playPromise.catch(error => {
              debugLog("自动恢复播放失败:", error);
            });
          }
        }
        if (storedState.currentTime) {
          globalAudio.currentTime = storedState.currentTime;
        }
      }
      
      // 监听全局音频事件
      globalAudio.addEventListener('ended', () => {
        // 播放结束后，自动播放下一首
        debugLog("音频播放结束");
        const event = new CustomEvent('music-ended');
        document.dispatchEvent(event);
      });
      
      globalAudio.addEventListener('timeupdate', () => {
        // 更新进度
        const event = new CustomEvent('music-timeupdate');
        document.dispatchEvent(event);
        
        // 定期保存当前播放状态到 sessionStorage (每5秒)
        if (Math.floor(globalAudio.currentTime) % 5 === 0) {
          saveAudioState({
            src: globalAudio.src,
            currentTime: globalAudio.currentTime,
            isPlaying: !globalAudio.paused
          });
        }
      });
      
      globalAudio.addEventListener('play', () => {
        // 更新播放状态
        debugLog("音频开始播放");
        const event = new CustomEvent('music-state-changed', { detail: { isPlaying: true } });
        document.dispatchEvent(event);
        
        // 保存播放状态
        saveAudioState({
          src: globalAudio.src,
          currentTime: globalAudio.currentTime,
          isPlaying: true
        });
      });
      
      globalAudio.addEventListener('pause', () => {
        // 更新暂停状态
        debugLog("音频已暂停");
        const event = new CustomEvent('music-state-changed', { detail: { isPlaying: false } });
        document.dispatchEvent(event);
        
        // 保存暂停状态
        saveAudioState({
          src: globalAudio.src,
          currentTime: globalAudio.currentTime,
          isPlaying: false
        });
      });

      // 添加错误监听
      globalAudio.addEventListener('error', (e) => {
        const error = e.target.error;
        debugLog(`音频错误: ${error?.code || 'unknown'}`, error?.message || 'No error details');
      });

      // 添加加载监听
      globalAudio.addEventListener('loadstart', () => {
        debugLog("音频开始加载");
      });

      globalAudio.addEventListener('loadeddata', () => {
        debugLog("音频数据已加载");
      });

      globalAudio.addEventListener('canplay', () => {
        debugLog("音频可以播放");
      });
    }
    
    return globalAudio;
  }
  
  // 页面可见性变化处理 - 在页面切换时保持音乐状态
  document.addEventListener('visibilitychange', () => {
    const globalAudio = window.globalMusicAudio;
    if (!globalAudio) return;
    
    if (document.visibilityState === 'visible') {
      // 页面恢复可见时，如果之前是播放状态，则恢复播放
      const wasPlaying = sessionStorage.getItem('music-was-playing') === 'true';
      if (wasPlaying && globalAudio.paused) {
        debugLog("页面恢复可见，尝试恢复播放");
        globalAudio.play().catch(err => debugLog('恢复播放失败:', err));
      }
    } else {
      // 页面不可见时，记录当前播放状态
      sessionStorage.setItem('music-was-playing', !globalAudio.paused);
      debugLog("页面不可见，记录播放状态: " + !globalAudio.paused);
    }
  });
  
  document.addEventListener('DOMContentLoaded', () => {
    debugLog("DOMContentLoaded 事件触发");
    
    // ===== 获取DOM元素 =====
    const musicToggle = document.getElementById('music-toggle');
    const playIcon = document.getElementById('play-icon');
    const pauseIcon = document.getElementById('pause-icon');
    const musicAnimation = document.getElementById('music-animation');
    const songInfo = document.getElementById('song-info');
    const songName = document.getElementById('song-name');
    const songArtist = document.getElementById('song-artist');
    const songCover = document.getElementById('song-cover');
    const songProgress = document.getElementById('song-progress');
    const firstVisitTooltip = document.getElementById('first-visit-tooltip');
    const tooltipDismiss = document.getElementById('tooltip-dismiss');
    
    if (!musicToggle) {
      debugLog("错误: 未找到音乐播放切换按钮");
      return;
    }
    
    // 获取全局音频实例
    const musicAudio = getGlobalAudio();
    
    // 当前播放的歌曲
    let currentSong = null;

    // 检查是否是首次访问
    function checkFirstVisit() {
      const hasVisitedBefore = localStorage.getItem('music-player-visited');
      if (!hasVisitedBefore && firstVisitTooltip) {
        debugLog("显示首次访问提示");
        // 添加高亮效果
        musicToggle.classList.add('music-toggle-active');
        // 显示提示
        setTimeout(() => {
          firstVisitTooltip.classList.remove('hidden');
        }, 1500);
      }
    }

    // 处理首次访问提示关闭
    if (tooltipDismiss) {
      tooltipDismiss.addEventListener('click', () => {
        firstVisitTooltip.classList.add('hidden');
        musicToggle.classList.remove('music-toggle-active');
        localStorage.setItem('music-player-visited', 'true');
      });
    }
    
    // ===== 核心功能函数 =====
    
    // 检查音频是否可以播放
    function checkAudioPlayability() {
      debugLog("检查音频是否可播放");
      // 创建临时音频元素测试
      const testAudio = new Audio();
      testAudio.volume = 0; // 静音测试
      
      // 选择一首歌测试
      const testSong = musicLibrary[0];
      testAudio.src = testSong.src;
      
      // 监听可以播放事件
      testAudio.addEventListener('canplaythrough', () => {
        debugLog("音频文件可以播放");
      });
      
      // 监听错误事件
      testAudio.addEventListener('error', (e) => {
        const error = e.target.error;
        debugLog(`音频文件无法加载: ${error?.code || 'unknown'}`, error?.message || 'No error details');
        debugLog("可能的原因：路径错误、文件损坏或权限问题");
        
        // 检查所有音频文件路径是否正确
        debugLog("当前页面URL:", window.location.href);
        const baseUrl = window.location.origin;
        debugLog("基础URL:", baseUrl);
        
        const firstSongFullUrl = new URL(testSong.src, window.location.href).href;
        debugLog("第一首歌完整URL:", firstSongFullUrl);
      });
      
      // 尝试加载
      testAudio.load();
    }

    // 随机选择一首歌曲 - 保证完全随机均等概率
    function selectRandomSong() {
      if (musicLibrary.length === 0) return null;
      
      // 确保避开播放出错的歌曲
      let song = null;
      let attempts = 0;
      const maxAttempts = 5;
      
      while (attempts < maxAttempts) {
        const randomIndex = Math.floor(Math.random() * musicLibrary.length);
        song = musicLibrary[randomIndex];
        
        // 如果没有播放失败记录，直接返回
        if (!window.failedMusicTracks || !window.failedMusicTracks.includes(song.src)) {
          break;
        }
        attempts++;
      }
      
      debugLog(`随机选择歌曲: ${song.title}`, song);
      return song;
    }
    
    // 加载并播放歌曲
    function loadAndPlaySong(song) {
      if (!song) {
        debugLog("错误: 尝试加载无效歌曲");
        return;
      }
      
      // 初始化播放失败追踪
      if (!window.failedMusicTracks) {
        window.failedMusicTracks = [];
      }
      
      debugLog("加载歌曲", song);
      currentSong = song;
      
      // 确保使用绝对路径
      const fullSrc = song.src.startsWith('http') || song.src.startsWith('/') 
        ? song.src 
        : `/${song.src.replace(/^\.\//, '')}`;
        
      debugLog("音频文件完整路径:", fullSrc);
      musicAudio.src = fullSrc;
      musicAudio.load();
      
      // 设置歌曲信息
      songName.textContent = song.title;
      songArtist.textContent = song.artist;
      
      // 设置封面图片
      const fullCoverPath = song.cover.startsWith('http') || song.cover.startsWith('/') 
        ? song.cover 
        : `/${song.cover.replace(/^\.\//, '')}`;
      
      songCover.style.backgroundImage = `url(${fullCoverPath})`;
      
      // 尝试自动播放
      debugLog("尝试播放歌曲");
      const playPromise = musicAudio.play();
      
      if (playPromise !== undefined) {
        playPromise.then(() => {
          // 自动播放成功
          debugLog("播放成功");
          showPauseIcon();
          // 如果之前失败过，现在成功了，从失败列表中移除
          const failedIndex = window.failedMusicTracks.indexOf(song.src);
          if (failedIndex > -1) {
            window.failedMusicTracks.splice(failedIndex, 1);
          }
        }).catch(error => {
          // 自动播放失败
          debugLog("播放失败", error);
          showPlayIcon();
          // 记录播放失败的歌曲
          if (!window.failedMusicTracks.includes(song.src)) {
            window.failedMusicTracks.push(song.src);
          }
          
          // 如果是由于用户交互限制，则显示提示
          if (error.name === 'NotAllowedError') {
            debugLog("因浏览器限制，需要用户交互才能播放");
          }
          // 如果是网络或文件错误，尝试播放另一首
          else if (error.name === 'MediaError' || error.name === 'NetworkError') {
            debugLog("媒体或网络错误，尝试播放另一首歌曲");
            setTimeout(() => {
              loadAndPlaySong(selectRandomSong());
            }, 1000);
          }
        });
      }
    }
    
    // 显示播放图标
    function showPlayIcon() {
      playIcon.classList.remove('hidden');
      pauseIcon.classList.add('hidden');
      musicAnimation.classList.add('hidden');
    }
    
    // 显示暂停图标
    function showPauseIcon() {
      playIcon.classList.add('hidden');
      pauseIcon.classList.remove('hidden');
      musicAnimation.classList.remove('hidden');
    }
    
    // 切换播放/暂停
    function togglePlayPause() {
      debugLog("点击播放/暂停按钮");
      
      if (!currentSong) {
        // 如果没有当前歌曲，随机选择一首并播放
        debugLog("没有当前歌曲，随机选择一首");
        loadAndPlaySong(selectRandomSong());
        return;
      }
      
      if (musicAudio.paused) {
        debugLog("恢复播放");
        musicAudio.play().catch(e => debugLog("播放失败", e));
      } else {
        debugLog("暂停播放");
        musicAudio.pause();
      }
    }
    
    // 更新进度条
    function updateProgress() {
      if (!musicAudio.duration) return;
      const progress = (musicAudio.currentTime / musicAudio.duration) * 100;
      songProgress.style.width = `${progress}%`;
    }
    
    // 显示歌曲信息
    function showSongInfo() {
      if (!currentSong) return;
      songInfo.classList.remove('hidden');
      setTimeout(() => {
        songInfo.classList.remove('opacity-0');
        songInfo.classList.remove('transform');
      }, 10);
    }
    
    // 隐藏歌曲信息
    function hideSongInfo() {
      songInfo.classList.add('opacity-0');
      songInfo.classList.add('transform');
      setTimeout(() => {
        songInfo.classList.add('hidden');
      }, 300);
    }
    
    // 从存储中恢复当前播放状态
    function restorePlayingState() {
      debugLog("恢复播放状态");
      
      // 从全局音频状态更新UI
      if (musicAudio.paused) {
        showPlayIcon();
      } else {
        showPauseIcon();
      }
      
      // 尝试从 sessionStorage 获取当前播放信息
      try {
        const audioState = sessionStorage.getItem('global-music-audio-state');
        if (audioState) {
          const state = JSON.parse(audioState);
          debugLog("找到已保存的音频状态", state);
          
          // 查找匹配的歌曲
          if (state.src) {
            const songPath = new URL(state.src, window.location.href).pathname;
            debugLog("查找匹配歌曲, 路径:", songPath);
            
            // 查找对应的歌曲
            const matchingSong = musicLibrary.find(song => {
              const fullPath = new URL(song.src, window.location.href).pathname;
              return fullPath === songPath;
            });
            
            if (matchingSong) {
              debugLog("找到匹配歌曲:", matchingSong.title);
              currentSong = matchingSong;
              
              // 更新UI信息
              songName.textContent = currentSong.title;
              songArtist.textContent = currentSong.artist;
              
              if (currentSong.cover) {
                songCover.style.backgroundImage = `url(${currentSong.cover})`;
              } else {
                songCover.style.backgroundImage = 'none';
              }
              
              return; // 已找到匹配歌曲，不需要继续处理
            } else {
              debugLog("未找到匹配歌曲");
            }
          }
        }
      } catch (e) {
        debugLog('恢复播放状态失败:', e);
      }
      
      // 后备方案：尝试从 localStorage 恢复歌曲信息
      const lastSongIndex = localStorage.getItem('music-last-song-index');
      if (lastSongIndex !== null) {
        const index = parseInt(lastSongIndex);
        if (!isNaN(index) && index >= 0 && index < musicLibrary.length) {
          currentSong = musicLibrary[index];
          debugLog("从 localStorage 恢复歌曲:", currentSong.title);
          
          // 只更新UI信息，不重载音频
          if (currentSong) {
            songName.textContent = currentSong.title;
            songArtist.textContent = currentSong.artist;
            
            if (currentSong.cover) {
              songCover.style.backgroundImage = `url(${currentSong.cover})`;
            } else {
              songCover.style.backgroundImage = 'none';
            }
          }
        }
      }
    }
    
    // ===== 初始化 =====
    
    // 初始化
    function init() {
      debugLog("初始化音乐播放器");
      
      // 检查是否是首次访问
      checkFirstVisit();
      
      // 检查音频是否可播放
      checkAudioPlayability();
      
      // 首先恢复UI状态
      restorePlayingState();
      
      // 如果是首次访问或音频源未设置，可能需要初始化播放器
      if (!musicAudio.src) {
        debugLog("音频源未设置，检查是否需要初始化");
        const lastPlayState = localStorage.getItem('music-play-state');
        const lastSongIndex = localStorage.getItem('music-last-song-index');
        
        if (lastPlayState === 'playing' && lastSongIndex !== null) {
          const index = parseInt(lastSongIndex);
          if (!isNaN(index) && index >= 0 && index < musicLibrary.length) {
            debugLog("从上次播放状态恢复");
            loadAndPlaySong(musicLibrary[index]);
          } else {
            // 默认不自动播放，等待用户交互
            debugLog("等待用户交互");
          }
        } else {
          debugLog("无上次播放状态，等待用户交互");
        }
      }
    }
    
    // 保存播放状态
    function savePlayState() {
      if (!currentSong) return;
      
      const isPlaying = !musicAudio.paused;
      localStorage.setItem('music-play-state', isPlaying ? 'playing' : 'paused');
      
      const songIndex = musicLibrary.findIndex(song => song.title === currentSong.title);
      if (songIndex !== -1) {
        localStorage.setItem('music-last-song-index', songIndex.toString());
      }
      
      debugLog("保存播放状态", { isPlaying, songIndex });
    }
    
    // ===== 事件监听 =====
    
    // 点击播放/暂停按钮
    debugLog("绑定点击事件到按钮");
    musicToggle.addEventListener('click', () => {
      debugLog("按钮点击");
      // 隐藏首次访问提示
      if (firstVisitTooltip && !firstVisitTooltip.classList.contains('hidden')) {
        firstVisitTooltip.classList.add('hidden');
        localStorage.setItem('music-player-visited', 'true');
      }
      musicToggle.classList.remove('music-toggle-active');
      
      togglePlayPause();
    });
    
    // 监听全局音频事件
    document.addEventListener('music-ended', () => {
      // 播放结束后，自动播放下一首随机歌曲
      debugLog("播放结束，自动播放下一首");
      loadAndPlaySong(selectRandomSong());
    });
    
    document.addEventListener('music-timeupdate', updateProgress);
    
    document.addEventListener('music-state-changed', (e) => {
      if (e.detail.isPlaying) {
        showPauseIcon();
      } else {
        showPlayIcon();
      }
    });
    
    // 鼠标悬停显示歌曲信息
    musicToggle.addEventListener('mouseenter', showSongInfo);
    musicToggle.addEventListener('mouseleave', hideSongInfo);
    
    // 页面关闭前保存状态
    window.addEventListener('beforeunload', savePlayState);

    // 双击调试面板
    musicToggle.addEventListener('dblclick', (e) => {
      e.preventDefault();
      const debugPanel = document.getElementById('music-debug');
      if (debugPanel) {
        if (debugPanel.classList.contains('hidden')) {
          showDebugPanel();
          debugLog("显示调试面板");
        } else {
          hideDebugPanel();
          debugLog("隐藏调试面板");
        }
      }
    });
    
    // 监听音频错误
    musicAudio.addEventListener('error', (e) => {
      const errorCode = musicAudio.error ? musicAudio.error.code : 'unknown';
      debugLog(`音频播放错误(${errorCode}): ${currentSong?.title || 'unknown song'}`);
      
      // 如果是播放中遇到错误，尝试播放下一首
      if (currentSong) {
        // 记录失败的音频
        if (!window.failedMusicTracks) {
          window.failedMusicTracks = [];
        }
        if (!window.failedMusicTracks.includes(currentSong.src)) {
          window.failedMusicTracks.push(currentSong.src);
        }
        
        // 延迟一秒后尝试播放另一首
        setTimeout(() => {
          debugLog("尝试播放另一首歌曲");
          loadAndPlaySong(selectRandomSong());
        }, 1000);
      }
    });
    
    // 初始化
    init();
  });
</script>

<style>
  /* 音乐动画效果 */
  @keyframes musicBounce {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.2); }
  }

  /* 调试面板样式 */
  #music-debug {
    font-family: monospace;
  }
</style> 