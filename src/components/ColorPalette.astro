---
import { siteConfig } from '../config/site';
---

<div class="relative">
  <button id="color-palette-button" class="p-1.5 rounded-full text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800">
    <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01" />
    </svg>
  </button>
  
  <!-- 颜色主题下拉面板 -->
  <div id="color-palette-panel" class="hidden absolute right-0 mt-2 w-60 bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden z-50">
    <div class="p-3">
      <h3 class="text-sm font-medium text-gray-900 dark:text-gray-100 mb-2 px-2">主题颜色</h3>
      <div class="space-y-2">
        {siteConfig.appearance.themeColors.map((color) => (
          <button 
            class="color-theme-option flex items-center w-full px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
            data-color={color.primaryColor}
            data-name={color.name}
            style={`border-left: 4px solid ${color.primaryColor};`}
          >
            <span class="w-5 h-5 rounded-full mr-3" style={`background-color: ${color.primaryColor}`}></span>
            <span>{color.name}</span>
            <span class="ml-auto color-theme-check hidden">✓</span>
          </button>
        ))}
      </div>
      <div class="mt-3 pt-2 border-t border-gray-200 dark:border-gray-700">
        <button id="apply-theme-color" class="w-full px-3 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded text-sm font-medium">
          应用选中的颜色
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  // 确保代码在DOMContentLoaded事件之后执行
  document.addEventListener('DOMContentLoaded', () => {
    // 获取DOM元素
    const colorPaletteButton = document.getElementById('color-palette-button');
    const colorPalettePanel = document.getElementById('color-palette-panel');
    const colorThemeOptions = document.querySelectorAll('.color-theme-option');
    const applyThemeColorButton = document.getElementById('apply-theme-color');
    
    let selectedColor = localStorage.getItem('theme-color') || '#0ea5e9';
    let selectedElement = null;
    
    // 设置CSS变量函数
    function setThemeColor(colorHex, updateStorage = true) {
      // 将十六进制颜色转换为RGB值
      const r = parseInt(colorHex.slice(1, 3), 16);
      const g = parseInt(colorHex.slice(3, 5), 16);
      const b = parseInt(colorHex.slice(5, 7), 16);
      
      // 设置CSS变量
      document.documentElement.style.setProperty('--color-primary', colorHex);
      document.documentElement.style.setProperty('--color-primary-rgb', `${r}, ${g}, ${b}`);
      
      // 创建一个颜色更新事件，通知其他组件
      const event = new CustomEvent('themeColorChanged', { 
        detail: { color: colorHex, rgb: `${r}, ${g}, ${b}` } 
      });
      document.dispatchEvent(event);
      
      // 保存到localStorage
      if (updateStorage) {
        localStorage.setItem('theme-color', colorHex);
      }
      
      // 强制重新应用颜色到所有元素
      const allElements = document.querySelectorAll('*');
      allElements.forEach(el => {
        if (el.classList.length > 0) {
          const classList = el.className.split(' ');
          if (classList.some(cls => cls.includes('primary-'))) {
            el.style.cssText = el.style.cssText; // 触发重新应用样式
          }
        }
      });
      
      // 显示颜色变化反馈
      document.body.style.transition = "none";
      document.body.classList.add('theme-color-changed');
      setTimeout(() => {
        document.body.style.transition = "";
        document.body.classList.remove('theme-color-changed');
      }, 300);
    }
    
    // 面板切换
    if (colorPaletteButton && colorPalettePanel) {
      colorPaletteButton.addEventListener('click', (event) => {
        event.stopPropagation(); // 阻止事件冒泡
        colorPalettePanel.classList.toggle('hidden');
        
        // 如果打开面板，高亮当前选中的颜色
        if (!colorPalettePanel.classList.contains('hidden')) {
          updateSelectedColorUI();
        }
      });
      
      // 点击面板内部不关闭面板
      colorPalettePanel.addEventListener('click', (event) => {
        event.stopPropagation();
      });
    }
    
    // 点击其他区域关闭面板
    document.addEventListener('click', () => {
      if (colorPalettePanel && !colorPalettePanel.classList.contains('hidden')) {
        colorPalettePanel.classList.add('hidden');
      }
    });
    
    // 更新选中颜色的UI
    function updateSelectedColorUI() {
      colorThemeOptions.forEach(option => {
        const check = option.querySelector('.color-theme-check');
        const color = option.getAttribute('data-color');
        if (color === selectedColor) {
          option.classList.add('bg-gray-100', 'dark:bg-gray-700');
          check.classList.remove('hidden');
          selectedElement = option;
        } else {
          option.classList.remove('bg-gray-100', 'dark:bg-gray-700');
          check.classList.add('hidden');
        }
      });
    }
    
    // 颜色主题选择
    colorThemeOptions.forEach(option => {
      if (option) {
        option.addEventListener('click', (event) => {
          event.preventDefault();
          event.stopPropagation();
          const color = option.getAttribute('data-color');
          if (color) {
            console.log('选择了颜色:', color); // 调试日志
            selectedColor = color;
            updateSelectedColorUI();
          }
        });
      }
    });
    
    // 应用选中的颜色
    if (applyThemeColorButton) {
      applyThemeColorButton.addEventListener('click', (event) => {
        event.preventDefault();
        event.stopPropagation();
        if (selectedColor) {
          setThemeColor(selectedColor, true);
          colorPalettePanel.classList.add('hidden');
          
          // 显示成功消息
          showColorChangeMessage(`颜色已更改为 ${selectedElement ? selectedElement.getAttribute('data-name') : '新主题'}`);
        }
      });
    }
    
    // 显示颜色变更消息
    function showColorChangeMessage(message) {
      // 创建消息元素
      const messageDiv = document.createElement('div');
      messageDiv.className = 'fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg z-50';
      messageDiv.textContent = message;
      
      // 添加到文档
      document.body.appendChild(messageDiv);
      
      // 3秒后移除
      setTimeout(() => {
        messageDiv.style.opacity = '0';
        messageDiv.style.transition = 'opacity 0.5s';
        setTimeout(() => {
          document.body.removeChild(messageDiv);
        }, 500);
      }, 3000);
    }
    
    // 立即应用保存的颜色
    const savedColor = localStorage.getItem('theme-color');
    if (savedColor) {
      selectedColor = savedColor;
      setThemeColor(savedColor, false);
    } else {
      // 获取默认颜色
      const firstColorOption = document.querySelector('.color-theme-option');
      if (firstColorOption) {
        const defaultColor = firstColorOption.getAttribute('data-color');
        if (defaultColor) {
          selectedColor = defaultColor;
          setThemeColor(defaultColor, false);
        }
      }
    }
  });
</script>

<style>
  /* 颜色选择面板样式 */
  .color-theme-option {
    transition: all 0.2s ease;
  }
  
  .color-theme-option:hover {
    transform: translateX(2px);
  }
  
  .color-theme-check {
    font-weight: bold;
    color: var(--color-primary);
  }
</style> 